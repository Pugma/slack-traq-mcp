// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/Pugma/slack-traq-mcp/internal/config"
	"github.com/Pugma/slack-traq-mcp/internal/litellm"
	"github.com/Pugma/slack-traq-mcp/internal/mcp"
	"github.com/Pugma/slack-traq-mcp/internal/orchestrator"
	"github.com/Pugma/slack-traq-mcp/internal/slack"
	"github.com/Pugma/slack-traq-mcp/internal/traq"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApp() (*orchestrator.Service, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	client := litellm.NewClient(configConfig)
	slackClient := slack.NewClient(configConfig)
	mcpClient, err := mcp.NewClient(slackClient)
	if err != nil {
		return nil, err
	}
	bot, err := traq.NewBot(configConfig)
	if err != nil {
		return nil, err
	}
	service := orchestrator.NewService(client, mcpClient, bot)
	return service, nil
}

// wire.go:

var providers = wire.NewSet(config.NewConfig, traq.NewBot, slack.NewClient, litellm.NewClient, orchestrator.NewService, mcp.NewClient)
